@page "/"
@using Data
@using SkiaSharp
@using System.IO
@using Microsoft.AspNetCore.Hosting;
@using Services
@using Blazored.Toast
@using Blazor.FileReader
@using Syncfusion.Blazor.Inputs

@inject IToastService toastService
@inject IWebHostEnvironment _environment
@inject IReportsService _reportsService

<BlazoredToasts />
@if (_preRendering)
{

}
<PageTitle Title="Add report"></PageTitle>

<div class="container">
    <h3>
        Production report
        <br /> @_date.ToString("yyyy-MM-dd HH:mm")
    </h3>
    <form id="report" name="report" autocomplete="on">
        <div class="form-row mb-3">
            <div class="col">
                <input type="text" autocomplete="on" id="orderNumber" maxlength="50" class="form-control" @bind="@_selectedOrder" placeholder="Order number" />
            </div>
        </div>
        <div class="form-row mb-3">
            <div class="col">
                <input type="text" autocomplete="on" id="itemNumbers" maxlength="18" class="form-control" @bind="@_selectedItemNumber" placeholder="Item number" />
            </div>
            <div class="col">
                <input type="text" maxlength="50" autocomplete="on" id="itemNames" class="form-control" @bind="@_selectedItemName" placeholder="Item name" />
            </div>
        </div>
    </form>

    <div class="form-row mb-3">
        <div class="col">
            <button @onclick="GenerateTimeCode" class="btn btn-success form-control">Generate time code</button>
        </div>
        <div class="col">
            <input type="text" maxlength="18" class="text-center form-control" @bind-value="_timeCode" />
        </div>
    </div>

    @if (_pictures != null)
    {
        @foreach (var item in _pictures)
        {
            <div class="border border-info rounded p-3 align-items-center mb-3" style="border-style: dashed !important;">
                <div class="row mb-2">
                    <div class="col-sm-12 col-md-6">
                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text">Section</span>
                            </div>
                            <input list="sections" type="text" class="form-control" autocomplete="on" name="sectionName" id="section" @bind-value="item.SectionName" />
                            <SfUploader AutoUpload="true" Multiple="false" AllowedExtensions=".jpg, .gif, .png" ShowFileList="true" Locale="pl">
                                <UploaderEvents ValueChange="OnFileUpload"></UploaderEvents>
                            </SfUploader>
                        </div>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-sm-12 col-md-6">
                        <img src="@item.PictureUrl" style="max-height:600px" class="img-fluid" alt="" />
                    </div>
                </div>

                <button class="btn btn-danger" @onclick="@(() => RemovePicture(item.GuId))">Remove</button>
            </div>

        }
        <datalist id="sections">
            <option value="Tip"></option>
            <option value="Root"></option>
            <option value="All"></option>
            <option value="Measure"></option>
        </datalist>
    }

    <div class="row mt-3">
        <div class="col-6">
            <button class="btn btn-success" @onclick="AddPicture">Add picture</button>
        </div>
        <div class="col-6">
            <SfUploader @ref="_uploader" AutoUpload="true" Multiple="true" AllowedExtensions=".jpg, .gif, .png" ShowFileList="true" Locale="pl">
                <UploaderEvents ValueChange="OnMultipleFileUpload"></UploaderEvents>
            </SfUploader>
        </div>
    </div>

    @if (_pictures.Any(x => string.IsNullOrWhiteSpace(x.SectionName)) || _pictures.Any(x => string.IsNullOrWhiteSpace(x.PictureUrl)) || string.IsNullOrWhiteSpace(_selectedOrder))
    {

    }
    else
    {
        <div class="row m-3">
            <div class="col-12">
                <button class="btn btn-success" type="submit" @onclick="PostProductionreport">Save production report</button>
            </div>
        </div>
    }
</div>

@code{
    bool _saving;
    DateTime _date;
    List<ReportPicture> _pictures;
    string _selectedSection;
    string _selectedItemName;
    string _selectedItemNumber;
    string _selectedOrder;
    string _timeCode;
    SfUploader _uploader;
    private bool _preRendering;

    protected override async Task OnInitializedAsync()
    {
        StartUp();
        _timeCode = null;
    }

    private void StartUp()
    {
        _date = DateTime.Now;
        _pictures = new List<ReportPicture>();
    }

    private void RemovePicture(string guid)
    {
        var picture = _pictures.FirstOrDefault(x => x.GuId == guid);

        if (picture != null)
        {
            _pictures.Remove(picture);
        }
    }

    public void OnFileUpload(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            ProcessFile(file);
        }

    }

    public void OnMultipleFileUpload(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            _pictures.Add(new ReportPicture());
            ProcessFile(file);
        }
    }

    private void ProcessFile(Syncfusion.Blazor.Inputs.Internal.UploadFiles file)
    {
        file.Stream.Position = 0;
        using (var codec = SKCodec.Create(file.Stream))
        {
            var desiredWidth = 800;
            var info = codec.Info;

            // get the scale that is nearest to what we want (eg: jpg returned 512)
            var supportedScale = codec.GetScaledDimensions((float)desiredWidth / info.Width);

            // decode the bitmap at the nearest size
            var nearest = new SKImageInfo(supportedScale.Width, supportedScale.Height);
            var bmp = SKBitmap.Decode(codec, nearest);

            var fileName = $"{Guid.NewGuid()}.jpg";

            var filePath = Path.Combine(_environment.ContentRootPath, "wwwroot", "uploads", fileName);
            using (var s = System.IO.File.OpenWrite(filePath))
            {
                SKData d = SKImage.FromBitmap(bmp).Encode(SKEncodedImageFormat.Jpeg, 90);
                d.SaveTo(s);
                _pictures.Last().PictureUrl = $"uploads/{fileName}";
            }
        }
    }

    void GenerateTimeCode()
    {
        _timeCode = Base36.NumberToBase36(DateTime.Now.Ticks);
    }

    void AddPicture()
    {
        _pictures.Add(new ReportPicture());
    }

    async Task PostProductionreport()
    {
        var orderId = await _reportsService.GetOrderId(_selectedOrder);

        if (string.IsNullOrWhiteSpace(_timeCode)) GenerateTimeCode();

        var report = new ProductionReport { Date = _date, ReportPictures = _pictures, ItemName = _selectedItemName, ItemNumber = _selectedItemNumber, OrderId = orderId, TimeCode = _timeCode };

        try
        {
            var result = await _reportsService.PostReport(report);

            if (result)
            {
                toastService.ShowSuccess("Added to the database");
                StartUp();
            }
            else
            {
                toastService.ShowError("Failure when adding to the database");
            }
        }
        catch (Exception e)
        {
            toastService.ShowError("Failure when adding to the database. You may have to reload the application.");
            throw e;
        }
        finally
        {
            await _uploader.ClearAll();
        }

    }
}