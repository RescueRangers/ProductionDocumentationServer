@page "/"
@using BlazorInputFile
@using Data
@using SkiaSharp
@using System.IO
@using Microsoft.AspNetCore.Hosting;
@using Services
@using Blazored.Toast
@inject IToastService toastService
@inject IWebHostEnvironment _environment
@inject IReportsService _reportsService

<BlazoredToasts />

<div class="container">
    <h3>
        Production report
        <br /> @_date.ToString("yyyy-MM-dd hh:mm")
    </h3>
    <form>
        <div class="form-row mb-3">
            <div class="col">
                <input type="text" list="orders" maxlength="50" class="form-control" @bind="@_selectedOrder" placeholder="Order number" />
                <datalist id="orders">
                    @if (_orders != null)
                    {
                        @foreach (var order in _orders)
                        {
                            <option value="@order.OrderNumber">@order.OrderNumber</option>
                        }
                    }
                </datalist>
            </div>
        </div>
        <div class="form-row mb-3">
            <div class="col">
                <input type="text" list="itemNumbers" maxlength="18" class="form-control" @bind="@_selectedItemNumber" placeholder="Item number" />
                <datalist id="itemNumbers">
                    @if (_itemNumbers != null)
                    {
                        @foreach (var itemNumber in _itemNumbers)
                        {
                            <option value="@itemNumber">@itemNumber</option>
                        }
                    }
                </datalist>
            </div>
            <div class="col">
                <input type="text" maxlength="50" list="itemNames" class="form-control" @bind="@_selectedItemName" placeholder="Item name" />
                <datalist id="itemNames">
                    @if (_itemNames != null)
                    {
                        @foreach (var itemName in _itemNames)
                        {
                            <option value="@itemName">@itemName</option>
                        }
                    }
                </datalist>
            </div>
        </div>
    </form>

    <div class="form-row mb-3">
        <div class="col">
            <button @onclick="GenerateTimeCode" class="btn btn-success form-control">Generate time code</button>
        </div>
        <div class="col">
            <input type="text" maxlength="18" class="text-center form-control" @bind-value="_timeCode" />
        </div>
    </div>

    @if (_pictures != null)
    {
        @foreach (var item in _pictures)
        {
            <div class="row mb-3">
                <div class="col-sm-12 col-md-6">
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text">Section</span>
                        </div>
                        <input type="text" class="form-control" list="sections" @bind="item.SectionName" />
                        <datalist id="sections">
                            @foreach (var reportSection in _reportSections.Sections)
                            {
                                <option value="@reportSection">@reportSection</option>
                            }
                        </datalist>
                        <div class="input-group-append">
                            <label class="btn pb-0 mb-0 btn-outline-dark">
                                <InputFile OnChange="HandleFileSelected" capture="environment" accept="image/*" />
                                <i class="oi oi-cloud-upload"></i> Upload
                            </label>
                        </div>
                    </div>
                </div>

                <div class="col-sm-12 col-md-6">
                    <img src="@item.PictureUrl" style="max-height:600px" class="img-fluid" alt="" />
                </div>
            </div>

        }
    }

    @if (_saving)
    {
        <div class="progress">
            <div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%">
                <span>Please wait<span class="dotdotdot"></span></span>
            </div>
        </div>
    }

    <div class="row m-3">
        <div class="col-12">
            <button class="btn btn-success" @onclick="AddPicture">Add picture</button>
        </div>
    </div>

    @if (_pictures.Any(x => string.IsNullOrWhiteSpace(x.SectionName)) || _pictures.Any(x => string.IsNullOrWhiteSpace(x.PictureUrl)) || string.IsNullOrWhiteSpace(_selectedOrder))
    {

    }
    else
    {
        <div class="row m-3">
            <div class="col-12">
                <button class="btn btn-success" @onclick="PostProductionreport">Save production report</button>
            </div>
        </div>
    }
</div>

@code{
    bool _saving;
    DateTime _date;
    List<ReportPicture> _pictures;
    ReportSections _reportSections;
    string _selectedSection;
    string _selectedItemName;
    string _selectedItemNumber;
    List<string> _itemNumbers;
    List<string> _itemNames;
    List<Order> _orders;
    string _selectedOrder;
    string _timeCode;

    protected override async Task OnInitializedAsync()
    {
        StartUp();
        _orders = await _reportsService.GetOrders();
        _itemNames = await _reportsService.GetItemNames();
        _itemNumbers = await _reportsService.GetItemNumbers();
        _reportSections = await _reportsService.GetReportSections();
        _timeCode = null;
    }

    private void StartUp()
    {
        _date = DateTime.Now;
        _pictures = new List<ReportPicture>();
    }

    async Task HandleFileSelected(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();

        var path = Path.GetTempFileName();
        using (var stream = new FileStream(path, FileMode.Create))
        {
            await file.Data.CopyToAsync(stream).ConfigureAwait(false);
        }

        var desiredWidth = 800;

        // create the codec
        using (var codec = SKCodec.Create(path))
        {
            var info = codec.Info;

            // get the scale that is nearest to what we want (eg: jpg returned 512)
            var supportedScale = codec.GetScaledDimensions((float)desiredWidth / info.Width);

            // decode the bitmap at the nearest size
            var nearest = new SKImageInfo(supportedScale.Width, supportedScale.Height);
            var bmp = SKBitmap.Decode(codec, nearest);

            var fileName = $"{Guid.NewGuid()}.jpg";

            var filePath = Path.Combine(_environment.ContentRootPath, "wwwroot", "uploads", fileName);
            using (var s = System.IO.File.OpenWrite(filePath))
            {
                SKData d = SKImage.FromBitmap(bmp).Encode(SKEncodedImageFormat.Jpeg, 90);
                d.SaveTo(s);
                _pictures.Last().PictureUrl = $"uploads/{fileName}";
            }
        }
    }

    void GenerateTimeCode()
    {
        _timeCode = Base36.NumberToBase36(DateTime.Now.Ticks);
    }

    void AddPicture()
    {
        _pictures.Add(new ReportPicture());
    }

    async Task PostProductionreport()
    {
        var orderId = await _reportsService.GetOrderId(_selectedOrder);

        if (string.IsNullOrWhiteSpace(_timeCode)) GenerateTimeCode();

        var report = new ProductionReport { Date = _date, ReportPictures = _pictures, ItemName = _selectedItemName, ItemNumber = _selectedItemNumber, OrderId = orderId, TimeCode = _timeCode };

        var sectionNames = _pictures.Select(x => x.SectionName).ToList();
        var sectionDifferences = sectionNames.Except(_reportSections.Sections).ToList();

        if (sectionDifferences.Any())
        {
            await _reportsService.PostSections(sectionDifferences);
            _reportSections.Sections.AddRange(sectionDifferences);
        }

        if (!_itemNames.Contains(_selectedItemName))
        {
            await _reportsService.PostItemName(_selectedItemName);
            _itemNames.Add(_selectedItemName);
        }

        if (!_itemNumbers.Contains(_selectedItemNumber))
        {
            await _reportsService.PostItemNumber(_selectedItemNumber);
            _itemNumbers.Add(_selectedItemNumber);
        }

        var orderNumbers = _orders.Select(x => x.OrderNumber);

        if (!orderNumbers.Contains(_selectedOrder))
        {
            _orders.Add(new Order { OrderNumber = _selectedOrder });
        }

        var result = await _reportsService.PostReport(report);

        if (result)
        {
            toastService.ShowSuccess("Added to the database");
            StartUp();
        }
        else
        {
            toastService.ShowError("Failure when adding to the database");
        }
    }
}