@page "/orders"

@using ProductionDocumentationServer.Data
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids

@inject NavigationManager _navManager

    <PageTitle>Orders</PageTitle>

<h3>Orders</h3>

<SfGrid AllowTextWrap="false" TValue="Order" ID="Grid" @ref="Grid" AllowPaging="true" AllowResizing="true" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true"
        AllowSorting="true" Toolbar="@(new List<string>() { "ExcelExport", "PdfExport", "Search"})">
    <GridSearchSettings IgnoreAccent="true" IgnoreCase="true"></GridSearchSettings>
    <GridEvents CommandClicked="OnCommandClicked" TValue="Order"></GridEvents>
    <SfDataManager AdaptorInstance="@typeof(ProductionDocumentationServer.Data.DataAdaptors.OrdersAdaptor)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" Mode="EditMode.Normal"></GridEditSettings>
    <GridSelectionSettings Type="SelectionType.Single"></GridSelectionSettings>
    <GridEvents OnToolbarClick="ToolbarClick" TValue="Order"></GridEvents>
    <GridColumns>
        <GridColumn Field="@nameof(Order.Id)" HeaderText="Id" IsPrimaryKey="false" Visible="false" IsIdentity="true"></GridColumn>
        <GridColumn Field=@nameof(Order.OrderNumber) HeaderText="Order Number" ValidationRules="@(new ValidationRules{ Required = true})" Width="80"></GridColumn>
        <GridColumn HeaderText=" " Width="180" TextAlign="TextAlign.Center">
            <GridCommandColumns>
                <GridCommandColumn ButtonOption="@(new CommandButtonOptions() { Content = "Open" })"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
</SfGrid>

@code {
    SfGrid<Order> Grid;

    public async Task ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_pdfexport")
        {
            await this.Grid.ExportToPdfAsync();
        }
        if (args.Item.Id == "Grid_excelexport")
        {
            await this.Grid.ExportToExcelAsync();
        }
        if (args.Item.Id == "Grid_csvexport")
        {
            await this.Grid.ExportToCsvAsync();
        }
    }

    public void OnCommandClicked(CommandClickEventArgs<Order> args)
    {
        _navManager.NavigateTo($"/reports/{args.RowData.Id}");
    }
}