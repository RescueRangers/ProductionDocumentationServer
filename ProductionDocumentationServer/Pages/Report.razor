@page "/report/{id}"

@using ProductionDocumentationServer.Data
@using ProductionDocumentationServer.Data.Repositories
@using ProductionDocumentationServer.Services
@inject IProductionReportsRepository _reportsRepo
@inject IPdfService _pdfService
@inject IJSRuntime js

<h3>Report</h3>

@if (_report == null)
{
    <div class="progress">
        <div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%">
            <span>Please wait<span class="dotdotdot"></span></span>
        </div>
    </div>
}
else
{
    @foreach (var item in _report.ReportPictures)
    {
        <div class="row mb-3">
            <div class="col-12">
                <h3>@item.SectionName</h3>
            </div>
            <div class="col-12"><img class="img-fluid" src="@item.PictureUrl" /></div>
        </div>
    }

    <button class="btn btn-outline-success mb-4" @onclick="@GeneratePdf">Download report</button>
}

@code {
    [Parameter] public string Id { get; set; }
    ProductionReport _report;

    protected override async Task OnInitializedAsync()
    {
        if (int.TryParse(Id, out var intId))
        {
            _report = await _reportsRepo.GetById(intId).ConfigureAwait(false);
        }
    }

    async Task GeneratePdf()
    {
        var result = await _pdfService.GeneratePdfReport(_report);

        FileUtil.SaveAs(js, "Report.pdf", result);
    }
}
